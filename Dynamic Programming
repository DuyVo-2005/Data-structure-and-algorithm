//analyse n into integer numbers has sum equal to n
/*#include<iostream>
using namespace std;
#define endl '\n'
const int Max=101;
int main(int argc, char *argv[])
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	int F[Max][Max], n;
	cin>>n;
	for(int i=0;i<n;i++)	F[0][i]=0;
	F[0][0]=1;// 0=0 is 1 way
	//F[m][v] is the numbers of ways creating sum of interger smaller than or equal to m
	for(int m=1;m<=n;m++)
		for(int v=0;v<=n;v++)
			if(m>v)	F[m][v]=F[m-1][v];
			else	F[m][v]=F[m-1][v]+F[m][v-m];
	cout<<F[n][n];
	return 0;
}*/
/*#include<iostream>
using namespace std;
#define endl '\n'
#include<vector>
int main(int argc, char *argv[])
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	int  n;
	cin>>n;
	vector<int>current(n+1,0), next(n+1,0);
	for(int i=0;i<=n;i++)	current[i]=0;
	current[0]=1;// 0=0 is 1 way
	//F[m][v] is the numbers of ways analysizing v into sum of interger smaller than or equal to m
	for(int m=1;m<=n;m++){
		for(int v=0;v<=n;v++)
			if(m>v)	next[v]=current[v];
			else	next[v]=current[v]+next[v-m];
		current=next;
	}
	cout<<next[n];
	return 0;
}
*/
/*#include<iostream>
using namespace std;
#define endl '\n'
const int Max=101;
int main(int argc, char *argv[])
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	int n, F[2][Max];
	cin>>n;
	//F[1][i] saves values of current array, F[2][i] saves values of next array
	for(int i=0;i<=n;i++)	F[0][i]=0;
	F[0][0]=1;
	int x=0, y=1;// x is current array, y is next array
	for(int m=1;m<=n;m++){
		for(int v=0;v<=n;v++)
			if(m>v)	F[y][v]=F[x][v];
			else	F[y][v]=F[x][v]+F[y][v-m];
		x=1-x;	y=1-y;//reverse array x, y
	}
	cout<<F[x][n];
	return 0;
}
*/
//renovate second
#include<iostream>
using namespace std;
#define endl '\n'
const int Max = 101;
int main(int argc, char *argv[])
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	int n, F[Max];
	cin>>n;
	for(int i=0;i<=n;i++)	F[i]=0;
	F[0]=1;
	for(int m=1;m<=n;m++)
		for(int v=m;v<=n;v++)
			F[v]=F[v]+F[v-m];
	cout<<F[n];
	return 0;
}

//recursive setting: more complex than
/*
// normal recursive way
#include<iostream>
using namespace std;
#define endl '\n'
int getF(int m, int v){
	if(m==0)	if(v==0)	return 1;
						else	return 0;
	if(m>v)	return getF(m-1,v);
	return	getF(m-1,v)+getF(m,v-m);
}
int main(int argc, char *argv[])
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	int n;
	cin>>n;
	cout<<getF(n,n);
	return 0;
}*/
//memorized recursive way
#include<iostream>
using namespace std;
#define endl '\n'
const int Max=101;
int F[Max][Max], n;
int getF(int m, int v){
	if(F[m][v]==-1)
		if(m==0)	if(v==0) F[m][v] = 1;
							else F[m][v] = 0;
		else	if(m>v)	F[m][v] = getF(m-1,v);
					else F[m][v] = getF(m-1,v)+getF(m,v-m);
	return F[m][v];
}
void fillChar(int F[][Max]){
	for(int i=0;i<=n;i++)
		for(int j=0;j<=n;j++)	F[i][j]=-1;//assign by a special value
}
int main(int argc, char *argv[])
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	cin>>n;
	fillChar(F);
	cout<<getF(n,n);
	return 0;
}

//longest increasing subsequence
/*#include<iostream>
using namespace std;
#define endl '\n'
const int inf=1e9;
int main(int argc, char *argv[])
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	int a[101], n, L[101], T[101];
	cin>>n;
	for(int i=1;i<=n;i++)	cin>>a[i];
	a[0]=-inf, a[n+1]=inf;
	L[n+1]=1;
	for(int i=n;i>=0;i--){
		int jmax=i;
		for(int j=i+1;j<=n+1;j++)	if(a[j]>a[i]&&L[j]>L[jmax])	jmax=j;
		L[i]=L[jmax]+1;
		T[i]=jmax;
	}
	cout<<L[0]-2;//subtract -inf and inf
	int i=T[0];
	while(i!=n+1){
		cout<<"\na["<<i<<"]="<<a[i];
		i=T[i];
	}
	return 0;
}*/
#include<iostream>
using namespace std;
#define endl '\n'
const int infinitive=1e9;
int a[101], n, m, L[101], T[101], StartOf[101];
//Hàm Find, tìm vị trí j mà nếu đem ai ghép vào đầu dãy con đơn điệu tăng dài nhất bắt đầu từ aj sẽ được dãy đơn điệu tăng dài nhất bắt đầu tại ai
int Find(int i){
	int inf=1, sup=m+1, median, j;
	while(!(inf+1==sup)){
		median=(inf+sup)/2;
		j=StartOf[median];
		if(a[j]>a[i])	inf=median;//Luôn để aStartOf[inf] > ai ≥ aStartOf[sup]
		else	sup=median;
	}
	return StartOf[inf];
}
int main(int argc, char *argv[])
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	cin>>n;
	for(int i=1;i<=n;i++)	cin>>a[i];
	a[0]=-infinitive, a[n+1]=infinitive;
	L[n+1]=1;
	//StartOf[k] là chỉ số x của phần tử a[x] thoả: dãy đơn điệu tăng dài nhất bắt đầu từ x có độ dài k
	StartOf[1]=n+1;//i=n+1
	m=1;//độ dài dãy con đơn điệu tăng dài nhất của dãy a[i...n+1] (i=n+1)
	int k, j;
	for(int i=n;i>=0;i--){
		j=Find(i);	k=L[j]+1;
		if(k>m){
			m=k;	StartOf[k]=i;
		}
		else	if(a[StartOf[k]]<a[i])	StartOf[k]=i;
		L[i]=k;
		T[i]=j;
	}
	cout<<L[0]-2;//subtract -inf and inf
	int i=T[0];
	while(i!=n+1){
		cout<<"\na["<<i<<"]="<<a[i];
		i=T[i];
	}
	return 0;
}
//11 1 2 3 8 9 4 5 6 20 9 10

//string transformation
#include<iostream>
using namespace std;
#define endl '\n'
#include<string.h>
#include<algorithm>
const int Max=101;
int F[Max][Max];
void print(string s){
	cout<<"\n";
	for(int i=1;i<s.length();i++)	cout<<s[i];
}
void Delete(string &s, int idx){
	for(int i=idx;i<s.length();i++)
		s[i]=s[i+1];
}
void Insert(string &s, int idx, int chr){
	s=s+" ";
	for(int i=s.length()-1;i>=idx;i--)
		s[i+1]=s[i];
	s[idx]=chr;
}
int main(int argc, char *argv[])
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	string x,y;
	cin>>x>>y;
	x=' '+x;//dư 1 đơn vị xâu x, y
	y=' '+y;//đánh lại chỉ số 1....m, 1...n
	int max_len=x.length()>y.length()?x.length():y.length();
	for(int i=0;i<y.length();i++)
		F[0][i]=i;
	for(int j=0;j<x.length();j++)
		F[j][0]=j;
	for(int i=1;i<x.length();i++)
		for(int j=1;j<y.length();j++)
			if(x[i]==y[j])
				F[i][j]=F[i-1][j-1];
			else
				F[i][j]=min(min(F[i-1][j],F[i][j-1]),F[i-1][j-1])+1;
	cout<<F[x.length()-1][y.length()-1];
	//Trace
	
	int m=x.length()-1, n=y.length()-1;
	while(m!=0||n!=0){
		if(x[m]==y[n]){
			m--;	n--;
		}
		else{
			print(x);
			cout<<"->";
			if(F[m][n]==F[m-1][n-1]+1) {						cout<<"\nReplace("<<m<<","<<y[n]<<")";
				x[m]=y[n];
				m--;	n--;
			}
			else
				if(F[m][n]==F[m-1][n]+1){
					cout<<"\nDelete("<<m<<")";
					Delete(x,m);
					m--;
				}
				else
					if(F[m][n]==F[m][n-1]+1){
						cout<<"\nInsert("<<m<<","<<y[n]<<")";
						Insert(x,m+1,y[n]);
						n--;
					}
			cout<<"->";
			print(x);
		}
	}
	return 0;
}
/*
F[m][n]=F[m-1][n-1]+1 Replace(m,Y[n])
F[m][n]=F[m-1][n]+1 Delete(m)
F[m][n]=F[m][n-1]+1 Insert(m,Y[n])
*/
/*
if(x[i]==y[j])
	F[i][j]=F[i-1][j-1]
else
	F[i][j]=min(F[i-1][j],F[i][j-1],F[i-1][j-1])+1
*/
/*
PBBCEFATZ
QABCDABEFA
*/
/*
ABCD
EABD
*/

//SUBSEQUENCES HAVE A SUM THAT IS COMPLETELY DIVIDED BY K
//Solution1
#include<iostream>
using namespace std;
#define endl '\n'
#include<algorithm>
const int maxN=1001, maxK=50, inf=1e9;
int a[maxN], F[maxN][maxK-1], n, k;
//f[i, t] là số phần tử tối thiểu phải chọn trong dãy a[1..i] để có tổng chia k dư t.
int Sub(int x, int y){// calculate x-y(mod k)
//phép trừ trên các lớp đồng dư mod k. Ví dụ khi k = 7 thì (1-3)%7=5)
	int tmp=(x-y)%k;
	if(tmp>=0)	return tmp;
	return tmp+k;
}
void FillChar(){
	for(int j=0;j<k;j++)	F[0][j]=inf;
}
void Optimize(){
	FillChar();
	F[0][0]=0;
	for(int i=1;i<=n;i++)
		for(int t=0;t<=k-1;t++)	F[i][t]=min(F[i - 1][t], F[i - 1][Sub(t, a[i])] + 1);
}
void Result(){
	int SumAll=0;
	for(int i=1;i<=n;i++)	SumAll+=a[i];
	cout<<n-F[n][SumAll%k];
	//n - số phần tử bỏ đi = số phần tử giữ lại
	int i=n, t=SumAll%k, Sum=0;
	for(int i=n;i>=1;i--)
		if(F[i][t]==F[i-1][t]){//ko bỏ ai, tức chọn ai
			cout<<"\na["<<i<<"]="<<a[i];
			Sum+=a[i];
		}
		else	t=Sub(t,a[i]);
	cout<<"\nSum = "<<Sum;
}
int main(int argc, char *argv[])
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	cin>>n>>k;
	for(int i=1;i<=n;i++)	cin>>a[i];
	Optimize();
	Result();
	return 0;
}
/*
10 5 
1 6 11 5 10 15 20 2 4 9
*/
//2nd way
/*//Phân các phần tử trong dãy A theo 
//các lớp đồng dư modul k
//Lớp i gồm các phần tử chia k dư i
//Gọi Count[i] là số lượng các phần tử thuộc lớp i

//Với 0 ≤ i, t < k; Gọi f[i, t] là số phần
//tử nhiều nhất có thể chọn được 
//trong các lớp 0, 1, 2, …, i để được
//tổng chia k dư t. Trong trường hợp 
//có cách chọn, gọi Trace[i, t] là số
//phần tử được chọn trong lớp i theo 
//phương án này, trong trường hợp 
//không có cách chọn, Trace[i, t]
//được coi là -1

//Ta dễ thấy rằng f[0, 0] = Count[0], 
//Trace[0, 0] = Count[0], còn Trace[0, i] với i≠0 bằng -1

//Với i ≥ 1; 0 ≤ t < k, Giả sử phương 
//án chọn ra nhiều phần tử nhất 
//trong các lớp từ 0 tới i để được 
//tổng chia k dư t có lấy j phần tử 
//của lớp i (0 ≤ j ≤ Count[i]), khi đó 
//nếu bỏ j phần tử này đi, sẽ phải 
//thu được phương án chọn ra nhiều 
//phần tử nhất trong các lớp từ 0 tới 
//i - 1 để được tổng chia k dư Sub(t-i*j)

//Từ đó suy ra công thức truy hồi:
//f[i, t]=max (f[i-1, Sub(t,j*i)]+j)
//Trace[i, t]=arg max (f[i-1, Sub(t,j*i)]+j)
//0 <= j <=Count[i]
//Trace[i-1,Sub(t,j.i)] != -1*/
#include<iostream>
using namespace std;
#define endl '\n'
const int MaxN=1001, MaxK=50;
int a[MaxN], Count[MaxK], f[MaxK][MaxK], Trace[MaxK][MaxK], n, k;
void FillChar(int a[], int na){
	for(int i=0;i<=na;i++)	a[i]=0;
}
void Enter(){
	int i;
	cin>>n>>k;
	FillChar(Count,k-1);
	for(i=1;i<=n;i++){
		cin>>a[i];
		Count[a[i]%k]++;
	}
}
int Sub(int x, int y){
	int temp=(x-y)%k;
	if(temp>=0)	return temp;
	return temp+k;
}
void FillCharMatrix(int f[][MaxK], int nf, int value){
	for(int i=0;i<=nf;i++)
		for(int j=0;j<=nf;j++)	f[i][j]=value;
}
void Optimize(){
	int i, j, t;
	FillCharMatrix(f,k-1,0);
	f[0][0]=Count[0];
	FillCharMatrix(Trace,k-1,-1);
	Trace[0][0]=Count[0];
	for(i=1;i<=k-1;i++)
		for(t=0;t<=k-1;t++)
			for(j=0;j<=Count[i];j++)
				if((Trace[i-1][Sub(t,i*j)]!=-1)&&(f[i][t]<f[i-1][Sub(t,i*j)]+j)){
					f[i][t]=f[i-1][Sub(t,i*j)]+j;
					Trace[i][t]=j;
				}
}
void Result(){
	int i, t, j;
	int Sum=0;
	t=0;
	//Tính lại các Count[i] := Số phần tử
 //phương án tối ưu sẽ chọn trong lớp i
 	for(i=k-1;i>=0;i--){
 		j=Trace[i][t];
 		t=Sub(t,j*i);
 		Count[i]=j;
 	}
 	cout<<f[k-1][0];
 	for(i=1;i<=n;i++){
 		t=a[i]%k;
 		if(Count[t]>0){
 			cout<<"\na["<<i<<"]="<<a[i];
 			Count[t]--;
 			Sum+=a[i];
 		}
 	}
 	cout<<"\nSum = "<<Sum;
}
int main(int argc, char *argv[])
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	Enter();
	Optimize();
	Result();
	return 0;
}
/*
10 5 
1 6 11 5 10 15 20 2 4 9 

5 2
1 2 3 4 5
*/

5.
//Matrix pxq mutiples Matrix q×r
#include<iostream>
using namespace std;
#define endl '\n'
const int Max=100;
int c[Max][Max], a[Max][Max], b[Max][Max], p, q ,r;
void enter(int a[][Max], int p, int q){
	for(int i=0;i<p;i++)
		for(int j=0;j<q;j++)	cin>>a[i][j];
}
void mul(int a[][Max], int b[][Max]){
	for(int i=0;i<p;i++)
		for(int j=0;j<r;j++){
			c[i][j]=0;
			for(int k=0;k<q;k++)
				c[i][j]=c[i][j]+a[i][k]*b[k][j];
		}
}
void result(int a[][Max], int p, int q){
	cout<<"\n";
	for(int i=0;i<p;i++){
		for(int j=0;j<q;j++)	cout<<a[i][j]<<" ";
		cout<<"\n";
	}
}
int main(int argc, char *argv[])
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	cin>>p>>q>>r;
	enter(a,p,q);
	enter(b,q,r);
	mul(a,b);
	result(c,p,r);
	return 0;
}
/*
2 3 2
1 2 1
1 1 1
1 1
2 2
1 1
*/
//O(pqr)
//NHÂN TỐI ƯU DÃY MA TRẬN CÓ
//SỐ PHÉP NHÂN ÍT NHẤT
//MATRIX MUTIPLICATIONS
//Gọi f[i, j] là số phép nhân số học tối thiểu cần thực hiện để nhân đoạn ma trận liên tiếp
#include<iostream>
using namespace std;
#define endl '\n'
const int Max=101, MaxLong= 1e9+1;
int a[Max+1], f[Max][Max], t[Max][Max], n;
void Enter(){
	cin>>n;
	for(int i=1;i<=n+1;i++)	cin>>a[i];
}
void Optimize(){
	int i, j, k, len, x, p, q, r;
	for(i=1;i<=n;i++)
		for(j=i;j<=n;j++)
			if(i==j)	f[i][j]=0;
			else f[i][j]=MaxLong;
	for(len=2;len<=n;len++)//Thử với độ dài đoạn từ 2 đến n
		for(i=1;i<=n-len+1;i++){//tính các f[i, i+len-1]
			j=i+len-1;
			for(k=i;k<=j-1;k++){//Thử các vị trí phân hoạch k
				p=a[i], q=a[k+1], r=a[j+1];
				x=f[i][k]+f[k+1][j]+p*q*r;
				if(x<f[i][j]){//tối ưu hoá f[i][j]
					f[i][j]=x;	t[i][j]=k;
				}
			}
		}
}
void Trace(int i, int j){
	//Truy vết bằng đệ quy, thủ tục này in ra cách kết hợp tối ưu tính m[i]…m[j]
	int k;
	if(i==j)	cout<<"m["<<i<<"]";
	else{
		cout<<"(";
		k=t[i][j];
		Trace(i,k);
		cout<<".";
		Trace(k+1,j);
		cout<<")";
	}
}
int main(int argc, char *argv[])
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	Enter();
	Optimize();
	cout<<"Number of numerical muplitications: "<<f[1][n]<<"\n";
	Trace(1,n);
	return 0;
}
/*
Input:
6
3 2 3 1 2 2 3
Output:
Number of numerical muplitications: 31
((m[1].(m[2].m[3])).((m[4].m[5]).m[6]))
*/
