#include <iostream>
#include<string>
#include<string.h>
using namespace std;
#define ElementType char
struct Node
{
    ElementType Info; //Thông tin của Node
    Node* pNext; //Con trỏ chỉ đến phần tử node tiếp theo
};
typedef struct
{
    Node* pTop;
} STACK;
Node* CreateNode(ElementType x) {
    Node* p = new Node;
    if (p != NULL) {
        p->Info = x;
        p->pNext = NULL;
    }
    else {
        cout << "\nBo nho day khong tao duoc!";
    }
    return p;
}
void InitStack(STACK& name) {
    name.pTop = NULL;
}
void Push(STACK& name, Node* p) {
    p->pNext = name.pTop;
    name.pTop = p;
}
int IsEmptyStack(STACK name) {
    if (name.pTop == NULL)
        return 1;
    return 0;
}
Node* Pop(STACK& name) {
    if (IsEmptyStack(name) == 1) {
        cout << "\nStack rong khong huy duoc!";
    }
    else {
        Node* res = CreateNode(name.pTop->Info);
        Node* p = name.pTop;
        name.pTop = name.pTop->pNext;
        delete p;
        return res;
    }
}
Node* Top(STACK name) {
    return name.pTop;
}
void printStack(STACK name) {
    //in tu top
    for (Node* p = name.pTop; p != NULL; p = p->pNext)
        cout << p->Info << " ";
    cout << "\n";
}
bool isMatching(char open, char close) {
    return open != close;
}
bool isbracketMatching(string algebraicExpression) {
    STACK tmp;//luu cac dau ngoat trai
    InitStack(tmp);
    for (char i = 0; i < algebraicExpression.length(); i++) {
        if (algebraicExpression[i] == '(')
            Push(tmp, CreateNode('('));
        if (algebraicExpression[i] == ')') {
            if (IsEmptyStack(tmp))   return false;
            else {
                if (!isMatching(algebraicExpression[i], Pop(tmp)->Info))
                    return false;
            }
        }
    }
    if(IsEmptyStack(tmp))//duyet het stack ko con ngoat du
        return true;
    return false;
}
int main()
{ 
    string algebraicExpression;
    cout << "Nhap 1 bieu thuc toan hoc: ";
    getline(cin, algebraicExpression);
    if (isbracketMatching(algebraicExpression))
        cout << "Well";
    else
        cout << "???";
    return 0;
}
//s*(s-a)*(s-b)*(s-c)
