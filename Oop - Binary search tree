using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Cây_nhị_phân_tìm_kiếm;
using ElementType = System.Int32;

namespace Cây_nhị_phân_tìm_kiếm;
public class Node
{
    public int info;
    public Node pLeft;
    public Node pRight;
}
public class Tree
{
    public Node root;
    public void InitTree()
    {
        this.root = null;
    }
    public int IsEmptyTree()
    {
        if (this.root == null) return 1;
        return 0;
    }
    public void InsertNode(ref Node root, Node newNode)
    {

        if (root == null) root = newNode;
        else
        {
            if (newNode.info < root.info) InsertNode(root.pLeft, newNode);
            else
            {
                if (newNode.info > root.info)
                    InsertNode(root.pRight, newNode);
            }
        }
    }
    public void ThayThe(ref Node p, ref TNode T)
    {
        if (T.pLeft != null) ThayThe(p, T.pLeft);
        else
        {
            //tim nut phai nhat ben trai
            p.info = T.info;
            p = T;
            T = T.pRight;
        }
    }
    void DeleteNode(ref Node root, ElementType node)
    {
        //co thi xoa, khong thi thoi
        if (root == null) return;//trung gia tri co roi thi bo qua
        if (root.info > node)//tim ben trai
            DeleteNode(root.pLeft, node);
        else
        {
            if (root.info < node)//tim ben phai
                DeleteNode(root->pRight, node);
            else// tim thay x trong cay
            {
                Node p = root;
                if (root.pLeft == null)// co 1 nut con tro den chinh no
                    root = root.pRight;// la nut con phai
                else
                {
                    if (root.pRight == NULL)
                        root = root.pLeft;//la nut con trai
                    else//TH co 2 nut con chon min ben phai
                        ThayThe(p, root.pRight);
                }
            }
        }
    }
    public Node SearchNode(Node root, ElementType x)
    {
        Node p = root;
        while (p != null)
        {
            if (x == p.info) return p;
            else
                if (x < p.info) p = p.pLeft;
            else p = p.pRight;
        }
        return null;
    }
    public void PrintTree_PreOrder(Node root)
    {
        if (root != null)
        {
            Console.WriteLine("\n" + root.info);
            PrintTree_PreOrder(root.pLeft);
            PrintTree_PreOrder(root.pRight);
        }
    }
    void PrintTree_InOrder(Node root)
    {
        if (root != null)
        {
            PrintTree_InOrder(root.pLeft);
            Console.WriteLine("\n" + root.info);
            PrintTree_InOrder(root.pRight);
        }
    }
    void PrintTree_PostOrder(Node root)
    {
        if (root != null)
        {
            PrintTree_PostOrder(root.pLeft);
            PrintTree_PostOrder(root.pRight);
            Console.WriteLine("\n" + root.key);
        }
    }
    public int HighTree(Node root)
    {

        if (root == null) return 0;
        int hl = HighTree(root.pLeft);
        int hr = HighTree(root.pRight);
        if (hl > hr)
            return (1 + hl);
        else
            return (1 + hr);
    }
    public int CountNode(Node root)
    {
        if (root == null) return 0;
        int nl = CountNode(root.pLeft);
        int nr = CountNode(root.pRight);
        return (1 + nl + nr);
    }
    public int CountNodeLeaf(Node root)
    {
        if (root == null) return 0;
        if (!root.pLeft && !root.pRight) return 1;
        int nll = CountNodeLeaf(root.pLeft);
        int nrl = CountNodeLeaf(root.pRight);
        return (nll + nrl);
    }
    int CountNodeNhanh(TNode* root)
    {
        return CountNode(root) - CountNodeLeaf(root);

    }
}
public static Node CreateNode(ElementType x)
{
    Node p = new Node();
    if (p == null) return null;
    p.info = x;
    p.pLeft = p.pRight = null;
    return p;
}
public static class Program
{
    public static void Main()
    {

    }
}
