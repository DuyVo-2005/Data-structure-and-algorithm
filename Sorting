## Selection sort

#include<iostream>
using namespace std;
#define endl '\n'
#include<algorithm>
int main(int argc, char *argv[])
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	int i, j, jmin, n=5;
	int a[]={3,2,1,5,4};
	for(i=0;i<n-1;i++){
		jmin=i;
		for(j=i+1;j<=n-1;j++)
			if(a[j]<a[jmin])	jmin=j;
		if(jmin!=i)
			swap(a[i],a[jmin]);
	}
	for(int i=0;i<n;i++)	cout<<a[i]<<" ";
	return 0;
}

## Bubble sort

#include <iostream>
using namespace std;
#include<algorithm>
int main()
{
    int i, j, n=5, a[]={6,8,7,10,9};
    for(i=1;i<=n-1;i++)
    {
        for(j=n-1;j>=i;j--)
            if(a[j]<a[j-1])
               swap(a[j],a[j-1]);
    }
    for(i=0;i<n;i++)    cout<<a[i]<<"\t";
}

## inserting sort

#include<iostream>
using namespace std;
#define endl '\n'
#include<algorithm>
int main(int argc, char *argv[])
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	int i, j, n=5, tmp;
	int k[]={3,2,1,5,4};
	for(i=1;i<=n-1;i++){
		tmp=k[i];
		j=i-1;
		while(j>=0&&tmp<k[j]){
			k[j+1]=k[j];
			j--;
		}
		k[j+1]=tmp;
	}
	for(int i=0;i<n;i++)	cout<<k[i]<<" ";
	return 0;
}
renovate: use binary search
#include<iostream>
using namespace std;
#define endl '\n'
int main(int argc, char *argv[])
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	int i, j, n=5, tmp, sup, inf, median;
	int k[]={3,2,1,5,4};
	for(i=1;i<=n-1;i++)
	{
		tmp=k[i];
		sup=i-1;
		inf=0;
		while(inf<=sup){
			median=(inf+sup)/2;
			if(k[median]>tmp) sup=median-1;
			else	inf=median+1;
		}
		for(int idx=i-1;idx>=inf;idx--)
			k[idx+1]=k[idx];
		k[inf]=tmp;
	}
	for(int i=0;i<n;i++)	cout<<k[i]<<" ";
	return 0;
}

## shellsort

#include<iostream>
using namespace std;
#define endl '\n'
const int MAX=2e5;
int k[MAX], n;
void enterArray(){
	cin>>n;
	for(int i=1;i<=n;i++)	cin>>k[i];
}
void displayArray(){
	for(int i=1;i<=n;i++)	cout<<k[i]<<" ";
}
int main(int argc, char *argv[])
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	int i, j, h, tmp;
	enterArray();
	h=n/2;// length of h step
	while(h!=0){
		for(i=h+1;i<=n;i++)//inserting sort on child array a[i-h], a[i], a[i+h], a[i+2h],...
		{
			tmp=k[i];	j=i-h;
			while(j>0&&k[j]>tmp){
				k[j+h]=k[j];	j=j-h;
			}
			k[j+h]=tmp;
		}
		h=h/2;
	}
	displayArray();
	return 0;
}
/*
6
5 3 2 6 4 1
*/

## Quicksort

#include<iostream>
using namespace std;
#define endl '\n'
#include<algorithm>
#include<time.h>
#include<stdlib.h>
const int MAX=2e5;
int a[MAX], n;
void enterArray(){
	cin>>n;
	for(int i=0;i<=n-1;i++)	cin>>a[i];
}
void partition(int L, int H){
	int i, j, Pivot;
	if(L>=H)	return;
	Pivot=a[rand()%(n)];// chose 1 random value in interval L to H (a[random(H-L+1)+L])
	i=L, j=H;
	do{
		//find a[i]>=key>=a[j]
		while(a[i]<Pivot)	i++;
		while(a[j]>Pivot)	j--;
		if(i<=j){
			if(i<j)
				swap(a[i],a[j]);//a[i]<=key<=a[j]
			i++;	j--;
		}
	}while(i<=j);
	partition(L,j);	partition(i,H);
}
void displayArray(){
	for(int i=0;i<=n-1;i++)	cout<<a[i]<<" ";
}
int main(int argc, char *argv[])
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	enterArray();
	partition(0,n-1);
	displayArray();
	return 0;
}
/*
6
5 3 2 6 4 1
*/

## find value of element at p position after sorting
#include<iostream>
#include<algorithm>
#include<time.h>
#include<stdlib.h>
using namespace std;
#define endl '\n'
const int MAX=2e6;
int n, a[MAX], p;
void enterArray(){
	cin>>n;
	for(int i=0;i<n;i++)	cin>>a[i];
}
void displayArray(){
	for(int i=0;i<n;i++)	cout<<a[i]<<" ";
	cout<<"\n";
}
int Select(int L, int H){
	int Pivot, i, j, res;
	Pivot=a[rand()%((H-L+1))+L];
	i=L, j=H;
	while(!(i>j)){
		while(a[i]<Pivot)	i++;
		while(a[j]>Pivot)	j--;
		if(i<=j){
			if(i<j)	swap(a[i],a[j]);
			i++;	j--;
		}
	}
	if(p<=j)	res=Select(L,j);
	else	if(p>=i)	res=Select(i,H);
				else	res=Pivot;
	return res;
}
int main(int argc, char *argv[])
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	enterArray();
	cin>>p;
	cout<<Select(0,n-1);
	return 0;
}
/*
5
4 5 2 1 3
1
Time complexity: O(n)*/
//renovate: the mysteriousness of number 5
#include<iostream>
using namespace std;
#define endl '\n'
#include<vector>
vector<int>k;
void InsertionSort(int inf, int sup, int n){
	int i, tmp, median;
	for(i=1;i<=n-1;i++)
	{
		tmp=k[i];
		sup=i-1;
		inf=0;
		while(inf<=sup){
			median=(inf+sup)/2;
			if(k[median]>tmp) sup=median-1;
			else	inf=median+1;
		}
		for(int idx=i-1;idx>=inf;idx--)
			k[idx+1]=k[idx];
		k[inf]=tmp;
	}
}
int Select(int L, int H, int p){
	if(H-L<49){
		InsertionSort(L,H,H-L+1);
		return k[L+p];//c++ array[0,n-1]
	}
	int i=L, j=L-1;
	while(!(i+5>H)){
		//find median of k[i,i+4] move to the beginning of the array
		InsertionSort(i,i+4,(i+4)-i+1);
		j++;
		swap(k[i+2],k[j]);
		i+=5;
	}
	int Pivot=Select(L,j,(j-L+1)/2);
	int cL=0, cE=0;//count the number of elements lower than and equal to pivot
	for(i=L;i<=H;i++)
		if(k[i]<Pivot)	cL++;
		else	if(k[i]==Pivot)	cE++;
	if(cL<p&&p<=cL+cE)// pivot equals to the value to find
		return Pivot;
	j=L-1;
	if(p<=cL){//Move keys smaller than the Pivot to the beginning of the array
		for(i=L;i<=H;i++)
			if(k[i]<Pivot){
				j++;
				swap(k[i],k[j]);
			}
		return Select(L,j,p);
	}
	else
	{
		//Move keys larger than the Pivot to the beginning of the paragraph
		for(i=L;i<=H;i++)
			if(k[i]>Pivot)
			{
				j++;
				swap(k[i],k[j]);
			}
		return Select(L,j,p-cL-cE);
	}
	//O(n)=T(n)=n
}
int main(int argc, char *argv[])
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	int p;
	for(int i=51;i>=0;i--)	k.push_back(i);// array 51 50 49 48 47 46 ....8 7 6 5 4 3 2 1 0
	cin>>p;
	cout<<Select(0,k.size()-1,p);
	return 0;
}

##heapsort
