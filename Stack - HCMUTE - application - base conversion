#include <iostream>
#include<string.h>
#include<string>
using namespace std;
#define ElementType int
struct Node
{
    ElementType Info; //Thông tin của Node
    Node* pNext; //Con trỏ chỉ đến phần tử node tiếp theo
};
typedef struct
{
    Node* pTop;
} STACK;
Node* CreateNode(ElementType x) {
    Node* p = new Node;
    if (p != NULL) {
        p->Info = x;
        p->pNext = NULL;
        return p;
    }
    else {
        cout << "\nBo nho day khong tao duoc!";
    }
}
void InitStack(STACK& name) {
    name.pTop = NULL;
}
void Push(STACK& name, Node* p) {
    p->pNext = name.pTop;
    name.pTop = p;
}
int IsEmptyStack(STACK name) {
    if (name.pTop == NULL)
        return 1;
    return 0;
}
Node* Pop(STACK& name) {
    if (IsEmptyStack(name) == 1) {
        cout << "\nStack rong khong huy duoc!";
    }
    else {
        Node* res = CreateNode(name.pTop->Info);
        Node* p = name.pTop;
        name.pTop = name.pTop->pNext;
        delete p;
        return res;
    }
}
Node* Top(STACK name) {
    return name.pTop;
}
void printStack(STACK name) {
    //in tu top
    for (Node* p = name.pTop; p != NULL; p = p->pNext)
        cout << p->Info << " ";
    cout << "\n";
}
void printNode(Node* p) {
    cout << p->Info << "\n";
}
char Hex(int n) {
    if (n >= 10)
        return 'A' + (n - 10);
    return '0'+n;
}
string DecToOther(int n, int base) {
    STACK tmp;
    InitStack(tmp);
    if (n != 0) {
        while (n != 0) {
            Push(tmp, CreateNode(n % base));
            n /= base;
        }
        string res = "";
        for (Node* p = tmp.pTop; p != NULL; p = p->pNext) {
            res += Hex(p->Info);
        }
        return res;
    }
    else
        return "0";
}
int Dec(char n) {
    if (n >= 'A')
        return (n - 'A') + 10;
    return n - '0';
}
int OtherToDec(string other, int base) {
    STACK tmp;
    InitStack(tmp);
    int i = 0;
    while (i < other.length()) {
        Push(tmp, CreateNode(Dec(other[i])));
        i++;
    }
    int expo = 0, res = 0;
    for (Node* p = tmp.pTop; p != NULL; p = p->pNext) {
        res += pow(base, expo) * p->Info;
        expo++;
    }
    return res;
}
int main()
{
    int n;
    cout << "1. Doi tu thap phan sang nhi phan";
    cout << "\n2. Doi tu nhi phan sang thap phan";
    cout << "\n3. Doi tu thap phan sang thap luc phan";
    cout << "\n4. Doi tu thap luc phan sang thap phan";
    cout << "\nNhap thao tac can thuc hien(so nguyen 1-4): ";
    cin >> n;
    switch (n){
    case 1: {
            int Dec;
            cout << "Nhap so he 10: ";
            cin >> Dec;
            cout<<DecToOther(Dec,2);
            break;
        }
    case 2: {
        string Bin;
        cout << "Nhap so he 2: ";
        cin >> Bin;
        cout<<OtherToDec(Bin,2);
        break;
    }
    case 3: {
        int Dec;
        cout << "Nhap so he 10: ";
        cin >> Dec;
        cout << DecToOther(Dec,16);
        break;
    }
    case 4: {
        string Hex;
        cout << "Nhap so he 16: ";
        cin >> Hex;
        cout << OtherToDec(Hex, 16);
        break;
    }
     default:
        break;
    }
    return 0;
}
